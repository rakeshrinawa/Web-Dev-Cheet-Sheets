Resources:- 
1. Traversy Media on Youtube
2. https://developer.mozilla.org/en-US/docs/
3. https://www.w3schools.com/

//  Use of brackets:-
1. () --> to pass/declare arguments of functions.
2. {}  --> to define body of a function/ object.
3. [] --> to define arrays and access elements at particular index.
4. "" or '' --> to declare strings.
5. Data types without quotes or anything represents a variable.
6. use "." to access property of an object


document.write('<h4>This is from document.write sample</h4>');

console.log("This is console log.")
console.error('This is an error.')
console.warn('This is warning.')

// Read about-> let & const
// const makes your code more robust - Try to use it more often.
const theConstant = 5;
let myVar = "Hi";

// See strings, Numbers, Boolean,null, undefined, symbol(with ES^)
const name = 'John';
const age = 30;
const rating = 4.5;
const isCool = true;
const x = null;
const y = undefined;
let z;
console.log(typeof x); // It's a bogus in JS

// Concatenation- joining two or more variable and/or constants/ strings
let name = 'Rocky';

1. Old way-> const myVar = 'Hello' + name + ', how may I help you?'
2. New way is by using Template String (use backticks) -> myVar = `Hello ${name}, how may I help you?`;

// const s = 'Hello World';
In JS, s.length represents a property while s.Uppercase() represents a method.
To copy a part of string, use substring(start point, end point)
--> let s= 'Hello World'; 
console.log(s.substring(2, 5).toUpperCase));

// To grab a letter at a specified value, use split and then grab it or do it directly
--> const s = 'Hello World';
console.log(s.substring(3, 4).toUpperCase);

// to search into a database, or format a string, use split()
const s = 'tech, machine, hello, friends';
fstring = s.split(',');
console.log(fstring[2]);

// "new" keyboard acts as a constructor
--> const numbers = new 
// to check if something is an array or not
console.log(Array.isArray(fruits));
console.log('hello');
console.log(fruits.indexOf('banana'));


// object literals are basically just key-value pairs.
const person = {
    firstName: 'Suraj',
    lastName: 'Kumar',
    age: 30,
    hobbies: ['chess', 'machines', 'big thinking'],
    address: {
        street: 'nehru nagar',
        state: 'New Delhi',
        pin: 110004
    }
}
console.log(person);
console.log(person.lastName, person.age);
console.log(person.address.state);
console.log(person.hobbies[2])

// To pull things out of an Object
const { firstName, lastName, address: { pin } } = person;
console.log(firstName)

// Add properties to an Object
person.email = 'surajkumar@gmail.com';
console.log(person.email);

--------------x---------x-------x---------x--------x--------x-----------
// How to create an Array of Objects
const todoList = [{
        id: 1,
        task: 'Wake up Early.',
        isCompleted: true
    },
    {
        id: 2,
        task: 'Exercise.',
        isCompleted: true
    },
    {
        id: 3,
        task: 'Write Diary.',
        isCompleted: false
    }
]

// JSON is a format most widely used to transfer data and communicate between different machines on the internet.
// use https://www.freeformatter.com/json-formatter.html to format Object Literals and JSON.stringify() to convert object literel into JSON format to transmit.
console.log(todoList)
// JSON.stringify() puts "" around each key and string in value.
const todoListJSON = JSON.stringify(todoList);
console.log(todoListJSON);
todoListreceived = JSON.parse(todoListJSON);
console.log(todoListreceived);

// Using Loops - lines of code which can be used many times depending upon certain conditions to reduce upon of lines.
for (let i = 0; i < 5; i++) {
    console.log(i);
}
let j = 2;
while (j < 7) {
    console.log(`While loop number:${j}.`);
    j++;
}
let newList;
for (let k = 0; k < todoList.length; k++) {
    console.log(todoList[k].task);
}

// Another way to acccess an Object
// here todoList is the name of the Array & todo is an arbitrary name given to iterate every element of the array.
for (let todo of todoList) {
    console.log(todo.task);
}

// To iterate arrays using High order loops using forEach, map, filter
todoList.forEach(function (todo) {
    console.log(todo.task);
})

// using forEach & arrow function
todoList.forEach(todo => console.log(todo.task));

// using map() to extract elements of an Object
let todoTaskList = todoList.map(todo => {
    return todo.task
});
console.log(todoTaskList);

// filtering elements of an array using filter()
let todoCompleted = todoList.filter(todo => {
            return todo.isCompleted === true;
        }).map((todo) => {
            return todo.task;
        })
console.log(todoCompleted);
// Using two or more High order methods
let todoCompleted = todoList.filter(todo => {
    if (todo.isCompleted === true) {
        return todo.task;
    };
}).map((todo) => {
    return todo.task;
})
console.log(todoCompleted);

// Conditionals
// if-else statement
const x = 5;
const y = 10;
if (x > 7 || y > 13) {
    console.log('Either x or y is greater than 3.')
} else {
    console.log('Neither x nor is greater than 13');
}

// Ternary Operators
const x = 13;
const color = x > 15 ? 'white' : 'red';
console.log(color)

// Using switch case using above code snippet which is just a Conditional operator
switch (color) {
    case 'white':
        console.log('The color is white');
        break;
    case 'red':
        console.log('The color is red.');
        break;
    default:
        console.log('The color is NOT red or white');
        break;
}

// Function --> Lines of code which takes an input and gives and output whenever called.
// parameters --> defined in the function when defined
// Arguments --> Passed in a function when it's called.
function addNums(num1 = 3, num2 = 5) {
    sum = num1 + num2;
    return sum;
}
result = addNums(7, 4);
console.log(result);

// Using Arrow functions =>
addNums = (num1 = 5, num2 = 9) => {
    sum = num1 + num2;
    return sum;
}
console.log(addNums());
// How to use single argument and single line body Arrow function
double = num => num * 2;
console.log(double(7));

// How to use 'this' keyword

// Constructor functions with prototypes (Arrow syntax not supported) and using Date() object and using complex functions
function Person(firstName, lastName, dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = dob;
    this.getBirthYear = function () {
        return this.dob.getFullYear();
    }
}
// Prototype -> defining functions of a Constructor outside of the constructor to reduce extra code.
Person.prototype.getFullName = function () {
    return `${this.firstName} ${this.lastName}`;
}

// Instantiate the object
const person1 = new Person('rahul', 'kumar', '04/05/1990');
const person2 = new Person('suresh', 'sharma', '05/06/1992');
console.log(person1);
console.log(person1.firstName)
console.log(person2.dob);
console.log(person2.getBirthYear());
console.log(person2.getFullName());
-----------------x---------x-------------x----------x----

// ES6/ ES 2015 Classes -> A prettier/more Organized way to write constructor functions
// Methods -> functions inside a Class
class Person {
    constructor(firstName, lastName, dob) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.dob = new Date(dob);
    }
    getBirthYear() {
        return this.dob.getFullYear();
    }
    getFullName() {
        return `${this.firstName} ${this.lastName}`;
    }
}
// Instantiate the class methods
const person1 = new Person('rahul', 'kumar', '04/05/1990');
const person2 = new Person('suresh', 'sharma', '05/06/1992');
console.log(person2.dob.getFullYear());
console.log(person1.getFullName())
------------x---------x------------x------------x-----------
// Watch Javascrict DOM Crash Course
// Every Browser has a Parent Object called 'window' object which stores all its properties/ methods/ functions and by manipulating these we can control everything shown on the screen/ sent to the server
// Use https://next.plnkr.co/ to create tool to prototype, experiment, share and debug your ideas on the web platform. From idea to implementation and frictionlessly.
------------x------------x------------x-----
// DOM Manipulation
console.log(window);
// as window is the parent object, we can also use 
window.alert('This is alert.');
. Also there is no need to mention window before any object as it's by default as everything is of the 'window' object.
// the 'fetch' object contains values which can be sent over the internet.
// the 'document' object contains values which can be displayed on the screen.

// Grabbing single element (Use textContent/innerText/InnerHTML)
form = document.getElementById('my-form');
console.log(form);
// querySelector was extensively used by  jQuery to grab window objects like div, section, id, class or any other.
console.log(document.querySelector('.container'));
// querySelector will only select only the first one of the query defined.


// Multiple Element selector to grab multiple objects.
console.log(document.querySelectorAll('.item'));
console.log(document.getElementsByClassName('items'));
console.log(document.getElementsByTagName('li'));

//Iterating over an element
const items = document.querySelectorAll('.item');
items.forEach((item) => console.log(item));

// Removing/Editing an element
ul = document.querySelector('.items');
ul.children[2].innerText = 'Rocky';
ul.lastElementChild.remove();
ul.remove();
ul.firstElementChild.textContent = 'Hello';


//
let ul = document.querySelector('.items');
ul.firstElementChild.textContent = 'Hello';
ul.children[2].innerHTML = '<h1>Rocks</h1>'

//Changing style
const btn = document.querySelector('.btn');
btn.style.background = 'red';

// Adding Events
const btn = document.querySelector('.btn');
btn.addEventListener('click', (e) => {
    e.preventDefault();
    console.log('Button Clicked.')

    // See Event Object.
    console.log(e);
    
    // See properties of Event Object
    console.log(e.target.id);
});

// Adding Click Event.
const btn = document.querySelector('.btn');
btn.addEventListener('click', (e) => {
    e.preventDefault();
    console.log('Button Clicked.')

    // Adding Event to change background
    document.querySelector('#my-form').style.background = '#ccc';
    document.querySelector('body').classList.add('bg-dark');
    document.querySelector('.items').lastElementChild.innerHTML = '<h1>Hello</h1>'
});

// See document, localStorage, fetch, 











